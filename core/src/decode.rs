use shared::cpu::CBOpcode;
use super::{Opcode, ops::*};

pub fn decode(opcode: Opcode) -> &'static [&'static [Op]] {
    match opcode {
        Opcode::Nop          => &[&[inc::pc]],
        Opcode::LdBCd16      => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, mem::merge, write::bc]],
        Opcode::LdIndBCA     => &[&[inc::pc, read::bc, mem::req_write], &[read::a, write::mem]],
        Opcode::IncBC        => &[&[inc::pc], &[read::bc, inc::inc16, write::bc]],
        Opcode::IncB         => &[&[inc::pc, read::b, inc::inc, write::b]],
        Opcode::DecB         => &[&[inc::pc, read::b, dec::dec, write::b]],
        Opcode::LdBd8        => &[&[inc::pc], &[read::mem, write::b]],
        Opcode::Rlca         => &[&[inc::pc, read::a, bits::rlc, write::a]],
        Opcode::LdInda16SP   => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, mem::merge, inc::pc], &[mem::req_write], &[read::sp, write::mem]],
        Opcode::AddHLBC      => &[&[inc::pc], &[read::bc, alu::add_hl]],
        Opcode::LdAIndBC     => &[&[inc::pc], &[read::bc, mem::req_read], &[read::mem, write::a]],
        Opcode::DecBC        => &[&[inc::pc], &[read::bc, dec::dec16, write::bc]],
        Opcode::IncC         => &[&[inc::pc, read::c, inc::inc, write::c]],
        Opcode::DecC         => &[&[inc::pc, read::c, dec::dec, write::c]],
        Opcode::LdCd8        => &[&[inc::pc], &[read::mem, write::c]],
        Opcode::Rrca         => &[&[inc::pc, read::a, bits::rrc, write::a]],
        Opcode::Stop0        => &[&[inc::pc, int::stop]],
        Opcode::LdDEd16      => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, mem::merge, write::de]],
        Opcode::LdIndDEA     => &[&[inc::pc, read::de, mem::req_write], &[read::a, write::mem]],
        Opcode::IncDE        => &[&[inc::pc, read::de, inc::inc16, write::de]],
        Opcode::IncD         => &[&[inc::pc, read::d, inc::inc, write::d]],
        Opcode::DecD         => &[&[inc::pc, read::d, dec::dec, write::d]],
        Opcode::LdDd8        => &[&[inc::pc], &[read::mem, write::d]],
        Opcode::Rla          => &[&[inc::pc, read::a, bits::rl, write::a]],
        Opcode::Jrr8         => &[&[inc::pc], &[read::mem, inc::pc], &[inc::jmp]],
        Opcode::AddHLDE      => &[&[inc::pc],  &[read::de, alu::add_hl]],
        Opcode::LdAIndDE     => &[&[inc::pc, read::de, mem::req_read], &[read::mem, write::a]],
        Opcode::DecDE        => &[&[inc::pc, read::de, dec::dec16, write::de]],
        Opcode::IncE         => &[&[inc::pc, read::e, inc::inc, write::e]],
        Opcode::DecE         => &[&[inc::pc, read::e, dec::dec, write::e]],
        Opcode::LdEd8        => &[&[inc::pc], &[read::mem, write::e]],
        Opcode::Rra          => &[&[inc::pc, read::a, bits::rr, write::a]],
        Opcode::JrNZr8       => &[&[inc::pc], &[read::mem, inc::pc, cond::nz], &[inc::jmp]],
        Opcode::LdHLd16      => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, mem::merge, write::hl]],
        Opcode::LdIndHLIncA  => &[&[inc::pc, read::hl, mem::req_write], &[read::a, write::mem, inc::hl]],
        Opcode::IncHL        => &[&[inc::pc, read::hl, inc::inc16, write::hl]],
        Opcode::IncH         => &[&[inc::pc, read::h, inc::inc, write::h]],
        Opcode::DecH         => &[&[inc::pc, read::h, dec::dec, write::h]],
        Opcode::LdHd8        => &[&[inc::pc], &[read::mem, write::h]],
        Opcode::Daa          => &[&[inc::pc, alu::daa]],
        Opcode::JrZr8        => &[&[inc::pc], &[read::mem, inc::pc, cond::z], &[inc::jmp]],
        Opcode::AddHLHL      => &[&[inc::pc], &[read::hl, alu::add_hl]],
        Opcode::LdAIndHLInc  => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, write::a, inc::hl]],
        Opcode::DecHL        => &[&[inc::pc, read::hl, dec::dec16, write::hl]],
        Opcode::IncL         => &[&[inc::pc, read::l, inc::inc, write::l]],
        Opcode::DecL         => &[&[inc::pc, read::l, dec::dec, write::l]],
        Opcode::LdLd8        => &[&[inc::pc], &[read::mem, write::l]],
        Opcode::Cpl          => &[&[inc::pc, alu::cpl]],
        Opcode::JrNCr8       => &[&[inc::pc], &[read::mem, inc::pc, cond::nc], &[inc::jmp]],
        Opcode::LdSPd16      => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, mem::merge, write::sp]],
        Opcode::LdIndHLDecA  => &[&[inc::pc, read::hl, mem::req_write], &[read::a, write::mem, dec::hl]],
        Opcode::IncSP        => &[&[inc::pc, inc::sp]],
        Opcode::IncIndHL     => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, inc::inc, read::hl, mem::req_write], &[write::mem]],
        Opcode::DecIndHL     => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, dec::dec, read::hl, mem::req_write], &[write::mem]],
        Opcode::LdIndHLd8    => &[&[inc::pc], &[read::mem, read::hl, mem::req_write], &[write::mem]],
        Opcode::Scf          => &[&[inc::pc, alu::scf]],
        Opcode::JrCr8        => &[&[inc::pc], &[read::mem, inc::pc, cond::c], &[inc::jmp]],
        Opcode::AddHLSP      => &[&[inc::pc], &[read::sp, alu::add_hl]],
        Opcode::LdAIndHLDec  => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, write::a, dec::hl]],
        Opcode::DecSP        => &[&[inc::pc, dec::sp]],
        Opcode::IncA         => &[&[inc::pc, read::a, inc::inc, write::a]],
        Opcode::DecA         => &[&[inc::pc, read::a, dec::dec, write::a]],
        Opcode::LdAd8        => &[&[inc::pc], &[read::mem, write::a, inc::pc]],
        Opcode::Ccf          => &[&[inc::pc, alu::ccf]],
        Opcode::LdBB         => &[&[inc::pc]],
        Opcode::LdBC         => &[&[inc::pc, read::c, write::b]],
        Opcode::LdBD         => &[&[inc::pc, read::d, write::b]],
        Opcode::LdBE         => &[&[inc::pc, read::e, write::b]],
        Opcode::LdBH         => &[&[inc::pc, read::h, write::b]],
        Opcode::LdBL         => &[&[inc::pc, read::l, write::b]],
        Opcode::LdBIndHL     => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, write::b]],
        Opcode::LdBA         => &[&[inc::pc, read::a, write::b]],
        Opcode::LdCB         => &[&[inc::pc, read::b, write::c]],
        Opcode::LdCC         => &[&[inc::pc]],
        Opcode::LdCD         => &[&[inc::pc, read::d, write::c]],
        Opcode::LdCE         => &[&[inc::pc, read::e, write::c]],
        Opcode::LdCH         => &[&[inc::pc, read::h, write::c]],
        Opcode::LdCL         => &[&[inc::pc, read::l, write::c]],
        Opcode::LdCIndHL     => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, write::c]],
        Opcode::LdCA         => &[&[inc::pc, read::a, write::c]],
        Opcode::LdDB         => &[&[inc::pc, read::b, write::d]],
        Opcode::LdDC         => &[&[inc::pc, read::c, write::d]],
        Opcode::LdDD         => &[&[inc::pc]],
        Opcode::LdDE         => &[&[inc::pc, read::e, write::d]],
        Opcode::LdDH         => &[&[inc::pc, read::h, write::d]],
        Opcode::LdDL         => &[&[inc::pc, read::l, write::d]],
        Opcode::LdDIndHL     => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, write::d]],
        Opcode::LdDA         => &[&[inc::pc, read::a, write::d]],
        Opcode::LdEB         => &[&[inc::pc, read::b, write::e]],
        Opcode::LdEC         => &[&[inc::pc, read::c, write::e]],
        Opcode::LdED         => &[&[inc::pc, read::d, write::e]],
        Opcode::LdEE         => &[&[inc::pc]],
        Opcode::LdEH         => &[&[inc::pc, read::h, write::e]],
        Opcode::LdEL         => &[&[inc::pc, read::l, write::e]],
        Opcode::LdEIndHL     => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, write::e]],
        Opcode::LdEA         => &[&[inc::pc, read::a, write::e]],
        Opcode::LdHB         => &[&[inc::pc, read::b, write::h]],
        Opcode::LdHC         => &[&[inc::pc, read::c, write::h]],
        Opcode::LdHD         => &[&[inc::pc, read::d, write::h]],
        Opcode::LdHE         => &[&[inc::pc, read::e, write::h]],
        Opcode::LdHH         => &[&[inc::pc]],
        Opcode::LdHL         => &[&[inc::pc, read::l, write::h]],
        Opcode::LdHIndHL     => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, write::h]],
        Opcode::LdHA         => &[&[inc::pc, read::a, write::h]],
        Opcode::LdLB         => &[&[inc::pc, read::b, write::l]],
        Opcode::LdLC         => &[&[inc::pc, read::c, write::l]],
        Opcode::LdLD         => &[&[inc::pc, read::d, write::l]],
        Opcode::LdLE         => &[&[inc::pc, read::e, write::l]],
        Opcode::LdLH         => &[&[inc::pc, read::h, write::l]],
        Opcode::LdLL         => &[&[inc::pc]],
        Opcode::LdLIndHL     => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, write::l]],
        Opcode::LdLA         => &[&[inc::pc, read::a, write::l]],
        Opcode::LdIndHLB     => &[&[inc::pc, read::hl, mem::req_write], &[read::b, write::mem]],
        Opcode::LdIndHLC     => &[&[inc::pc, read::hl, mem::req_write], &[read::c, write::mem]],
        Opcode::LdIndHLD     => &[&[inc::pc, read::hl, mem::req_write], &[read::d, write::mem]],
        Opcode::LdIndHLE     => &[&[inc::pc, read::hl, mem::req_write], &[read::e, write::mem]],
        Opcode::LdIndHLH     => &[&[inc::pc, read::hl, mem::req_write], &[read::h, write::mem]],
        Opcode::LdIndHLL     => &[&[inc::pc, read::hl, mem::req_write], &[read::l, write::mem]],
        Opcode::Halt         => &[&[inc::pc, int::halt]],
        Opcode::LdIndHLA     => &[&[inc::pc, read::hl, mem::req_write], &[read::a, write::mem]],
        Opcode::LdAB         => &[&[inc::pc, read::b, write::a]],
        Opcode::LdAC         => &[&[inc::pc, read::c, write::a]],
        Opcode::LdAD         => &[&[inc::pc, read::d, write::a]],
        Opcode::LdAE         => &[&[inc::pc, read::e, write::a]],
        Opcode::LdAH         => &[&[inc::pc, read::h, write::a]],
        Opcode::LdAL         => &[&[inc::pc, read::l, write::a]],
        Opcode::LdAIndHL     => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, write::a]],
        Opcode::LdAA         => &[&[inc::pc]],
        Opcode::AddAB        => &[&[inc::pc, read::b, alu::add]],
        Opcode::AddAC        => &[&[inc::pc, read::c, alu::add]],
        Opcode::AddAD        => &[&[inc::pc, read::d, alu::add]],
        Opcode::AddAE        => &[&[inc::pc, read::e, alu::add]],
        Opcode::AddAH        => &[&[inc::pc, read::h, alu::add]],
        Opcode::AddAL        => &[&[inc::pc, read::l, alu::add]],
        Opcode::AddAIndHL    => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, alu::add]],
        Opcode::AddAA        => &[&[inc::pc, read::a, alu::add]],
        Opcode::AdcAB        => &[&[inc::pc, read::b, alu::adc]],
        Opcode::AdcAC        => &[&[inc::pc, read::c, alu::adc]],
        Opcode::AdcAD        => &[&[inc::pc, read::d, alu::adc]],
        Opcode::AdcAE        => &[&[inc::pc, read::e, alu::adc]],
        Opcode::AdcAH        => &[&[inc::pc, read::h, alu::adc]],
        Opcode::AdcAL        => &[&[inc::pc, read::l, alu::adc]],
        Opcode::AdcAIndHL    => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, alu::adc]],
        Opcode::AdcAA        => &[&[inc::pc, read::a, alu::adc]],
        Opcode::SubB         => &[&[inc::pc, read::b, alu::sub]],
        Opcode::SubC         => &[&[inc::pc, read::c, alu::sub]],
        Opcode::SubD         => &[&[inc::pc, read::d, alu::sub]],
        Opcode::SubE         => &[&[inc::pc, read::e, alu::sub]],
        Opcode::SubH         => &[&[inc::pc, read::h, alu::sub]],
        Opcode::SubL         => &[&[inc::pc, read::l, alu::sub]],
        Opcode::SubIndHL     => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, alu::sub]],
        Opcode::SubA         => &[&[inc::pc, read::a, alu::sub]],
        Opcode::SbcAB        => &[&[inc::pc, read::b, alu::sbc]],
        Opcode::SbcAC        => &[&[inc::pc, read::c, alu::sbc]],
        Opcode::SbcAD        => &[&[inc::pc, read::d, alu::sbc]],
        Opcode::SbcAE        => &[&[inc::pc, read::e, alu::sbc]],
        Opcode::SbcAH        => &[&[inc::pc, read::h, alu::sbc]],
        Opcode::SbcAL        => &[&[inc::pc, read::l, alu::sbc]],
        Opcode::SbcAIndHL    => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, alu::sbc]],
        Opcode::SbcAA        => &[&[inc::pc, read::a, alu::sbc]],
        Opcode::AndB         => &[&[inc::pc, read::b, alu::and]],
        Opcode::AndC         => &[&[inc::pc, read::c, alu::and]],
        Opcode::AndD         => &[&[inc::pc, read::d, alu::and]],
        Opcode::AndE         => &[&[inc::pc, read::e, alu::and]],
        Opcode::AndH         => &[&[inc::pc, read::h, alu::and]],
        Opcode::AndL         => &[&[inc::pc, read::l, alu::and]],
        Opcode::AndIndHL     => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, alu::and]],
        Opcode::AndA         => &[&[inc::pc, read::a, alu::and]],
        Opcode::XorB         => &[&[inc::pc, read::b, alu::xor]],
        Opcode::XorC         => &[&[inc::pc, read::c, alu::xor]],
        Opcode::XorD         => &[&[inc::pc, read::d, alu::xor]],
        Opcode::XorE         => &[&[inc::pc, read::e, alu::xor]],
        Opcode::XorH         => &[&[inc::pc, read::h, alu::xor]],
        Opcode::XorL         => &[&[inc::pc, read::l, alu::xor]],
        Opcode::XorIndHL     => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, alu::xor]],
        Opcode::XorA         => &[&[inc::pc, read::a, alu::xor]],
        Opcode::OrB          => &[&[inc::pc, read::b, alu::or]],
        Opcode::OrC          => &[&[inc::pc, read::c, alu::or]],
        Opcode::OrD          => &[&[inc::pc, read::d, alu::or]],
        Opcode::OrE          => &[&[inc::pc, read::e, alu::or]],
        Opcode::OrH          => &[&[inc::pc, read::h, alu::or]],
        Opcode::OrL          => &[&[inc::pc, read::l, alu::or]],
        Opcode::OrIndHL      => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, alu::or]],
        Opcode::OrA          => &[&[inc::pc, read::a, alu::or]],
        Opcode::CpB          => &[&[inc::pc, read::b, alu::cmp]],
        Opcode::CpC          => &[&[inc::pc, read::c, alu::cmp]],
        Opcode::CpD          => &[&[inc::pc, read::d, alu::cmp]],
        Opcode::CpE          => &[&[inc::pc, read::e, alu::cmp]],
        Opcode::CpH          => &[&[inc::pc, read::h, alu::cmp]],
        Opcode::CpL          => &[&[inc::pc, read::l, alu::cmp]],
        Opcode::CpIndHL      => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, alu::cmp]],
        Opcode::CpA          => &[&[inc::pc, read::a, alu::cmp]],
        Opcode::RetNZ        => &[&[inc::pc], &[cond::nz, read::sp, mem::req_read], &[read::mem, inc::sp, mem::req_read], &[read::mem, inc::sp, mem::merge], &[write::pc]],
        Opcode::PopBC        => &[&[inc::pc, read::sp, mem::req_read], &[read::mem, write::c, inc::sp, mem::req_read], &[read::mem, write::b, inc::sp]],
        Opcode::JpNZa16      => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, mem::merge, cond::nz], &[write::pc]],
        Opcode::Jpa16        => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem], &[mem::merge, write::pc]],
        Opcode::CallNZa16    => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, inc::pc, cond::nz, dec::sp], &[read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, mem::merge, write::pc]],
        Opcode::PushBC       => &[&[inc::pc, dec::sp], &[read::sp, mem::req_write, dec::sp], &[read::b, write::mem, read::sp, mem::req_write], &[read::c, write::mem]],
        Opcode::AddAd8       => &[&[inc::pc], &[read::mem, alu::add]],
        Opcode::Rst00H       => &[&[inc::pc, read::FIXED_0], &[dec::sp, read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, write::pc]],
        Opcode::RetZ         => &[&[inc::pc], &[cond::z, read::sp, mem::req_read], &[read::mem, inc::sp, mem::req_read], &[read::mem, inc::sp, mem::merge], &[write::pc]],
        Opcode::Ret          => &[&[read::sp, mem::req_read], &[read::mem, inc::sp, mem::req_read], &[read::mem, inc::sp, mem::merge], &[write::pc]],
        Opcode::JpZa16       => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, mem::merge, cond::z], &[write::pc]],
        Opcode::PrefixCB     => &[&[inc::pc, mem::cb]],
        Opcode::CallZa16     => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, inc::pc, cond::z, dec::sp], &[read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, mem::merge, write::pc]],
        Opcode::Calla16      => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, inc::pc, dec::sp], &[read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, mem::merge, write::pc]],
        Opcode::AdcAd8       => &[&[inc::pc], &[read::mem, alu::adc]],
        Opcode::Rst08H       => &[&[inc::pc, read::FIXED_8], &[dec::sp, read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, write::pc]],
        Opcode::RetNC        => &[&[inc::pc], &[cond::nc, read::sp, mem::req_read], &[read::mem, inc::sp, mem::req_read], &[read::mem, inc::sp, mem::merge], &[write::pc]],
        Opcode::PopDE        => &[&[inc::pc, read::sp, mem::req_read], &[read::mem, write::e, inc::sp, mem::req_read], &[read::mem, write::d, inc::sp]],
        Opcode::JpNCa16      => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, mem::merge, cond::nc], &[write::pc]],
        Opcode::CallNCa16    => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, inc::pc, cond::nc, dec::sp], &[read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, mem::merge, write::pc]],
        Opcode::PushDE       => &[&[inc::pc, dec::sp], &[read::sp, mem::req_write, dec::sp], &[read::d, write::mem, read::sp, mem::req_write], &[read::e, write::mem]],
        Opcode::Subd8        => &[&[inc::pc], &[read::mem, alu::sub]],
        Opcode::Rst10H       => &[&[inc::pc, read::FIXED_10], &[dec::sp, read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, write::pc]],
        Opcode::RetC         => &[&[inc::pc], &[cond::c, read::sp, mem::req_read], &[read::mem, inc::sp, mem::req_read], &[read::mem, inc::sp, mem::merge], &[write::pc]],
        Opcode::Reti         => &[&[read::sp, mem::req_read], &[read::mem, inc::sp, mem::req_read], &[read::mem, inc::sp, mem::merge], &[write::pc, int::on]],
        Opcode::JpCa16       => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, mem::merge, cond::c], &[write::pc]],
        Opcode::CallCa16     => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, inc::pc, cond::c, dec::sp], &[read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, mem::merge, write::pc]],
        Opcode::SbcAd8       => &[&[inc::pc], &[read::mem, alu::sbc]],
        Opcode::Rst18H       => &[&[inc::pc, read::FIXED_18], &[dec::sp, read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, write::pc]],
        Opcode::LdhInda8A    => &[&[inc::pc], &[read::mem, mem::req_write_u8, inc::pc], &[read::a, write::mem]],
        Opcode::PopHL        => &[&[inc::pc, read::sp, mem::req_read], &[read::mem, write::l, inc::sp, mem::req_read], &[read::mem, write::h, inc::sp]],
        Opcode::LdIndCA      => &[&[inc::pc, read::c, mem::req_write_u8], &[read::a, write::mem]],
        Opcode::PushHL       => &[&[inc::pc, dec::sp], &[read::sp, mem::req_write, dec::sp], &[read::h, write::mem, read::sp, mem::req_write], &[read::l, write::mem]],
        Opcode::Andd8        => &[&[inc::pc], &[read::mem, alu::and]],
        Opcode::Rst20H       => &[&[inc::pc, read::FIXED_20], &[dec::sp, read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, write::pc]],
        Opcode::AddSPr8      => &[&[inc::pc], &[read::mem], &[alu::add_sp], &[write::sp]],
        Opcode::JpHL         => &[&[read::hl, write::pc]],
        Opcode::LdInda16A    => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, mem::merge, mem::req_write], &[read::a, write::mem, inc::pc]],
        Opcode::Xord8        => &[&[inc::pc], &[read::mem, alu::xor]],
        Opcode::Rst28H       => &[&[inc::pc, read::FIXED_28], &[dec::sp, read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, write::pc]],
        Opcode::LdhAInda8    => &[&[inc::pc], &[read::mem, mem::req_read_u8, inc::pc], &[read::mem, write::a]],
        Opcode::PopAF        => &[&[inc::pc, read::sp, mem::req_read], &[read::mem, write::f, inc::sp, mem::req_read], &[read::mem, write::a, inc::sp]],
        Opcode::LdAIndC      => &[&[inc::pc, read::c, mem::req_read_u8], &[read::mem, write::a]],
        Opcode::Di           => &[&[inc::pc, int::off]],
        Opcode::PushAF       => &[&[inc::pc, dec::sp], &[read::sp, mem::req_write, dec::sp], &[read::a, write::mem, read::sp, mem::req_write], &[read::f, write::mem]],
        Opcode::Ord8         => &[&[inc::pc], &[read::mem, alu::or]],
        Opcode::Rst30H       => &[&[inc::pc, read::FIXED_30], &[dec::sp, read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, write::pc]],
        Opcode::LdHLSPaddr8  => &[&[inc::pc], &[read::mem, alu::add_sp], &[write::hl]],
        Opcode::LdSPHL       => &[&[inc::pc], &[read::hl, write::sp]],
        Opcode::LdAInda16    => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, mem::merge, mem::req_read], &[read::mem, write::a]],
        Opcode::Ei           => &[&[inc::pc, int::on]],
        Opcode::Cpd8         => &[&[inc::pc], &[read::mem, alu::cmp, inc::pc]],
        Opcode::Rst38H       => &[&[inc::pc, read::FIXED_38], &[dec::sp, read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, write::pc]],
        Opcode::CB(opcode)   => decode_cb(opcode)
    }
}

fn decode_cb(opcode: CBOpcode) -> &'static [&'static [Op]] {
    match opcode {
        CBOpcode::RlcB        => unimplemented!("RlcB"),
        CBOpcode::RlcC        => unimplemented!("RlcC"),
        CBOpcode::RlcD        => unimplemented!("RlcD"),
        CBOpcode::RlcE        => unimplemented!("RlcE"),
        CBOpcode::RlcH        => unimplemented!("RlcH"),
        CBOpcode::RlcL        => unimplemented!("RlcL"),
        CBOpcode::RlcIndHL    => unimplemented!("RlcIndHL"),
        CBOpcode::RlcA        => unimplemented!("RlcA"),
        CBOpcode::RrcB        => unimplemented!("RrcB"),
        CBOpcode::RrcC        => unimplemented!("RrcC"),
        CBOpcode::RrcD        => unimplemented!("RrcD"),
        CBOpcode::RrcE        => unimplemented!("RrcE"),
        CBOpcode::RrcH        => unimplemented!("RrcH"),
        CBOpcode::RrcL        => unimplemented!("RrcL"),
        CBOpcode::RrcIndHL    => unimplemented!("RrcIndHL"),
        CBOpcode::RrcA        => unimplemented!("RrcA"),
        CBOpcode::RlB         => unimplemented!("RlB"),
        CBOpcode::RlC         => unimplemented!("RlC"),
        CBOpcode::RlD         => unimplemented!("RlD"),
        CBOpcode::RlE         => unimplemented!("RlE"),
        CBOpcode::RlH         => unimplemented!("RlH"),
        CBOpcode::RlL         => unimplemented!("RlL"),
        CBOpcode::RlIndHL     => unimplemented!("RlIndHL"),
        CBOpcode::RlA         => unimplemented!("RlA"),
        CBOpcode::RrB         => unimplemented!("RrB"),
        CBOpcode::RrC         => unimplemented!("RrC"),
        CBOpcode::RrD         => unimplemented!("RrD"),
        CBOpcode::RrE         => unimplemented!("RrE"),
        CBOpcode::RrH         => unimplemented!("RrH"),
        CBOpcode::RrL         => unimplemented!("RrL"),
        CBOpcode::RrIndHL     => unimplemented!("RrIndHL"),
        CBOpcode::RrA         => unimplemented!("RrA"),
        CBOpcode::SlaB        => unimplemented!("SlaB"),
        CBOpcode::SlaC        => unimplemented!("SlaC"),
        CBOpcode::SlaD        => unimplemented!("SlaD"),
        CBOpcode::SlaE        => unimplemented!("SlaE"),
        CBOpcode::SlaH        => unimplemented!("SlaH"),
        CBOpcode::SlaL        => unimplemented!("SlaL"),
        CBOpcode::SlaIndHL    => unimplemented!("SlaIndHL"),
        CBOpcode::SlaA        => unimplemented!("SlaA"),
        CBOpcode::SraB        => unimplemented!("SraB"),
        CBOpcode::SraC        => unimplemented!("SraC"),
        CBOpcode::SraD        => unimplemented!("SraD"),
        CBOpcode::SraE        => unimplemented!("SraE"),
        CBOpcode::SraH        => unimplemented!("SraH"),
        CBOpcode::SraL        => unimplemented!("SraL"),
        CBOpcode::SraIndHL    => unimplemented!("SraIndHL"),
        CBOpcode::SraA        => unimplemented!("SraA"),
        CBOpcode::SwapB       => unimplemented!("SwapB"),
        CBOpcode::SwapC       => unimplemented!("SwapC"),
        CBOpcode::SwapD       => unimplemented!("SwapD"),
        CBOpcode::SwapE       => unimplemented!("SwapE"),
        CBOpcode::SwapH       => unimplemented!("SwapH"),
        CBOpcode::SwapL       => unimplemented!("SwapL"),
        CBOpcode::SwapIndHL   => unimplemented!("SwapIndHL"),
        CBOpcode::SwapA       => unimplemented!("SwapA"),
        CBOpcode::SrlB        => unimplemented!("SrlB"),
        CBOpcode::SrlC        => unimplemented!("SrlC"),
        CBOpcode::SrlD        => unimplemented!("SrlD"),
        CBOpcode::SrlE        => unimplemented!("SrlE"),
        CBOpcode::SrlH        => unimplemented!("SrlH"),
        CBOpcode::SrlL        => unimplemented!("SrlL"),
        CBOpcode::SrlIndHL    => unimplemented!("SrlIndHL"),
        CBOpcode::SrlA        => unimplemented!("SrlA"),
        CBOpcode::Bit0B       => unimplemented!("Bit0B"),
        CBOpcode::Bit0C       => unimplemented!("Bit0C"),
        CBOpcode::Bit0D       => unimplemented!("Bit0D"),
        CBOpcode::Bit0E       => unimplemented!("Bit0E"),
        CBOpcode::Bit0H       => unimplemented!("Bit0H"),
        CBOpcode::Bit0L       => unimplemented!("Bit0L"),
        CBOpcode::Bit0IndHL   => unimplemented!("Bit0IndHL"),
        CBOpcode::Bit0A       => unimplemented!("Bit0A"),
        CBOpcode::Bit1B       => unimplemented!("Bit1B"),
        CBOpcode::Bit1C       => unimplemented!("Bit1C"),
        CBOpcode::Bit1D       => unimplemented!("Bit1D"),
        CBOpcode::Bit1E       => unimplemented!("Bit1E"),
        CBOpcode::Bit1H       => unimplemented!("Bit1H"),
        CBOpcode::Bit1L       => unimplemented!("Bit1L"),
        CBOpcode::Bit1IndHL   => unimplemented!("Bit1IndHL"),
        CBOpcode::Bit1A       => unimplemented!("Bit1A"),
        CBOpcode::Bit2B       => unimplemented!("Bit2B"),
        CBOpcode::Bit2C       => unimplemented!("Bit2C"),
        CBOpcode::Bit2D       => unimplemented!("Bit2D"),
        CBOpcode::Bit2E       => unimplemented!("Bit2E"),
        CBOpcode::Bit2H       => unimplemented!("Bit2H"),
        CBOpcode::Bit2L       => unimplemented!("Bit2L"),
        CBOpcode::Bit2IndHL   => unimplemented!("Bit2IndHL"),
        CBOpcode::Bit2A       => unimplemented!("Bit2A"),
        CBOpcode::Bit3B       => unimplemented!("Bit3B"),
        CBOpcode::Bit3C       => unimplemented!("Bit3C"),
        CBOpcode::Bit3D       => unimplemented!("Bit3D"),
        CBOpcode::Bit3E       => unimplemented!("Bit3E"),
        CBOpcode::Bit3H       => unimplemented!("Bit3H"),
        CBOpcode::Bit3L       => unimplemented!("Bit3L"),
        CBOpcode::Bit3IndHL   => unimplemented!("Bit3IndHL"),
        CBOpcode::Bit3A       => unimplemented!("Bit3A"),
        CBOpcode::Bit4B       => unimplemented!("Bit4B"),
        CBOpcode::Bit4C       => unimplemented!("Bit4C"),
        CBOpcode::Bit4D       => unimplemented!("Bit4D"),
        CBOpcode::Bit4E       => unimplemented!("Bit4E"),
        CBOpcode::Bit4H       => unimplemented!("Bit4H"),
        CBOpcode::Bit4L       => unimplemented!("Bit4L"),
        CBOpcode::Bit4IndHL   => unimplemented!("Bit4IndHL"),
        CBOpcode::Bit4A       => unimplemented!("Bit4A"),
        CBOpcode::Bit5B       => unimplemented!("Bit5B"),
        CBOpcode::Bit5C       => unimplemented!("Bit5C"),
        CBOpcode::Bit5D       => unimplemented!("Bit5D"),
        CBOpcode::Bit5E       => unimplemented!("Bit5E"),
        CBOpcode::Bit5H       => unimplemented!("Bit5H"),
        CBOpcode::Bit5L       => unimplemented!("Bit5L"),
        CBOpcode::Bit5IndHL   => unimplemented!("Bit5IndHL"),
        CBOpcode::Bit5A       => unimplemented!("Bit5A"),
        CBOpcode::Bit6B       => unimplemented!("Bit6B"),
        CBOpcode::Bit6C       => unimplemented!("Bit6C"),
        CBOpcode::Bit6D       => unimplemented!("Bit6D"),
        CBOpcode::Bit6E       => unimplemented!("Bit6E"),
        CBOpcode::Bit6H       => unimplemented!("Bit6H"),
        CBOpcode::Bit6L       => unimplemented!("Bit6L"),
        CBOpcode::Bit6IndHL   => unimplemented!("Bit6IndHL"),
        CBOpcode::Bit6A       => unimplemented!("Bit6A"),
        CBOpcode::Bit7B       => unimplemented!("Bit7B"),
        CBOpcode::Bit7C       => unimplemented!("Bit7C"),
        CBOpcode::Bit7D       => unimplemented!("Bit7D"),
        CBOpcode::Bit7E       => unimplemented!("Bit7E"),
        CBOpcode::Bit7H       => unimplemented!("Bit7H"),
        CBOpcode::Bit7L       => unimplemented!("Bit7L"),
        CBOpcode::Bit7IndHL   => unimplemented!("Bit7IndHL"),
        CBOpcode::Bit7A       => unimplemented!("Bit7A"),
        CBOpcode::Res0B       => unimplemented!("Res0B"),
        CBOpcode::Res0C       => unimplemented!("Res0C"),
        CBOpcode::Res0D       => unimplemented!("Res0D"),
        CBOpcode::Res0E       => unimplemented!("Res0E"),
        CBOpcode::Res0H       => unimplemented!("Res0H"),
        CBOpcode::Res0L       => unimplemented!("Res0L"),
        CBOpcode::Res0IndHL   => unimplemented!("Res0IndHL"),
        CBOpcode::Res0A       => unimplemented!("Res0A"),
        CBOpcode::Res1B       => unimplemented!("Res1B"),
        CBOpcode::Res1C       => unimplemented!("Res1C"),
        CBOpcode::Res1D       => unimplemented!("Res1D"),
        CBOpcode::Res1E       => unimplemented!("Res1E"),
        CBOpcode::Res1H       => unimplemented!("Res1H"),
        CBOpcode::Res1L       => unimplemented!("Res1L"),
        CBOpcode::Res1IndHL   => unimplemented!("Res1IndHL"),
        CBOpcode::Res1A       => unimplemented!("Res1A"),
        CBOpcode::Res2B       => unimplemented!("Res2B"),
        CBOpcode::Res2C       => unimplemented!("Res2C"),
        CBOpcode::Res2D       => unimplemented!("Res2D"),
        CBOpcode::Res2E       => unimplemented!("Res2E"),
        CBOpcode::Res2H       => unimplemented!("Res2H"),
        CBOpcode::Res2L       => unimplemented!("Res2L"),
        CBOpcode::Res2IndHL   => unimplemented!("Res2IndHL"),
        CBOpcode::Res2A       => unimplemented!("Res2A"),
        CBOpcode::Res3B       => unimplemented!("Res3B"),
        CBOpcode::Res3C       => unimplemented!("Res3C"),
        CBOpcode::Res3D       => unimplemented!("Res3D"),
        CBOpcode::Res3E       => unimplemented!("Res3E"),
        CBOpcode::Res3H       => unimplemented!("Res3H"),
        CBOpcode::Res3L       => unimplemented!("Res3L"),
        CBOpcode::Res3IndHL   => unimplemented!("Res3IndHL"),
        CBOpcode::Res3A       => unimplemented!("Res3A"),
        CBOpcode::Res4B       => unimplemented!("Res4B"),
        CBOpcode::Res4C       => unimplemented!("Res4C"),
        CBOpcode::Res4D       => unimplemented!("Res4D"),
        CBOpcode::Res4E       => unimplemented!("Res4E"),
        CBOpcode::Res4H       => unimplemented!("Res4H"),
        CBOpcode::Res4L       => unimplemented!("Res4L"),
        CBOpcode::Res4IndHL   => unimplemented!("Res4IndHL"),
        CBOpcode::Res4A       => unimplemented!("Res4A"),
        CBOpcode::Res5B       => unimplemented!("Res5B"),
        CBOpcode::Res5C       => unimplemented!("Res5C"),
        CBOpcode::Res5D       => unimplemented!("Res5D"),
        CBOpcode::Res5E       => unimplemented!("Res5E"),
        CBOpcode::Res5H       => unimplemented!("Res5H"),
        CBOpcode::Res5L       => unimplemented!("Res5L"),
        CBOpcode::Res5IndHL   => unimplemented!("Res5IndHL"),
        CBOpcode::Res5A       => unimplemented!("Res5A"),
        CBOpcode::Res6B       => unimplemented!("Res6B"),
        CBOpcode::Res6C       => unimplemented!("Res6C"),
        CBOpcode::Res6D       => unimplemented!("Res6D"),
        CBOpcode::Res6E       => unimplemented!("Res6E"),
        CBOpcode::Res6H       => unimplemented!("Res6H"),
        CBOpcode::Res6L       => unimplemented!("Res6L"),
        CBOpcode::Res6IndHL   => unimplemented!("Res6IndHL"),
        CBOpcode::Res6A       => unimplemented!("Res6A"),
        CBOpcode::Res7B       => unimplemented!("Res7B"),
        CBOpcode::Res7C       => unimplemented!("Res7C"),
        CBOpcode::Res7D       => unimplemented!("Res7D"),
        CBOpcode::Res7E       => unimplemented!("Res7E"),
        CBOpcode::Res7H       => unimplemented!("Res7H"),
        CBOpcode::Res7L       => unimplemented!("Res7L"),
        CBOpcode::Res7IndHL   => unimplemented!("Res7IndHL"),
        CBOpcode::Res7A       => unimplemented!("Res7A"),
        CBOpcode::Set0B       => unimplemented!("Set0B"),
        CBOpcode::Set0C       => unimplemented!("Set0C"),
        CBOpcode::Set0D       => unimplemented!("Set0D"),
        CBOpcode::Set0E       => unimplemented!("Set0E"),
        CBOpcode::Set0H       => unimplemented!("Set0H"),
        CBOpcode::Set0L       => unimplemented!("Set0L"),
        CBOpcode::Set0IndHL   => unimplemented!("Set0IndHL"),
        CBOpcode::Set0A       => unimplemented!("Set0A"),
        CBOpcode::Set1B       => unimplemented!("Set1B"),
        CBOpcode::Set1C       => unimplemented!("Set1C"),
        CBOpcode::Set1D       => unimplemented!("Set1D"),
        CBOpcode::Set1E       => unimplemented!("Set1E"),
        CBOpcode::Set1H       => unimplemented!("Set1H"),
        CBOpcode::Set1L       => unimplemented!("Set1L"),
        CBOpcode::Set1IndHL   => unimplemented!("Set1IndHL"),
        CBOpcode::Set1A       => unimplemented!("Set1A"),
        CBOpcode::Set2B       => unimplemented!("Set2B"),
        CBOpcode::Set2C       => unimplemented!("Set2C"),
        CBOpcode::Set2D       => unimplemented!("Set2D"),
        CBOpcode::Set2E       => unimplemented!("Set2E"),
        CBOpcode::Set2H       => unimplemented!("Set2H"),
        CBOpcode::Set2L       => unimplemented!("Set2L"),
        CBOpcode::Set2IndHL   => unimplemented!("Set2IndHL"),
        CBOpcode::Set2A       => unimplemented!("Set2A"),
        CBOpcode::Set3B       => unimplemented!("Set3B"),
        CBOpcode::Set3C       => unimplemented!("Set3C"),
        CBOpcode::Set3D       => unimplemented!("Set3D"),
        CBOpcode::Set3E       => unimplemented!("Set3E"),
        CBOpcode::Set3H       => unimplemented!("Set3H"),
        CBOpcode::Set3L       => unimplemented!("Set3L"),
        CBOpcode::Set3IndHL   => unimplemented!("Set3IndHL"),
        CBOpcode::Set3A       => unimplemented!("Set3A"),
        CBOpcode::Set4B       => unimplemented!("Set4B"),
        CBOpcode::Set4C       => unimplemented!("Set4C"),
        CBOpcode::Set4D       => unimplemented!("Set4D"),
        CBOpcode::Set4E       => unimplemented!("Set4E"),
        CBOpcode::Set4H       => unimplemented!("Set4H"),
        CBOpcode::Set4L       => unimplemented!("Set4L"),
        CBOpcode::Set4IndHL   => unimplemented!("Set4IndHL"),
        CBOpcode::Set4A       => unimplemented!("Set4A"),
        CBOpcode::Set5B       => unimplemented!("Set5B"),
        CBOpcode::Set5C       => unimplemented!("Set5C"),
        CBOpcode::Set5D       => unimplemented!("Set5D"),
        CBOpcode::Set5E       => unimplemented!("Set5E"),
        CBOpcode::Set5H       => unimplemented!("Set5H"),
        CBOpcode::Set5L       => unimplemented!("Set5L"),
        CBOpcode::Set5IndHL   => unimplemented!("Set5IndHL"),
        CBOpcode::Set5A       => unimplemented!("Set5A"),
        CBOpcode::Set6B       => unimplemented!("Set6B"),
        CBOpcode::Set6C       => unimplemented!("Set6C"),
        CBOpcode::Set6D       => unimplemented!("Set6D"),
        CBOpcode::Set6E       => unimplemented!("Set6E"),
        CBOpcode::Set6H       => unimplemented!("Set6H"),
        CBOpcode::Set6L       => unimplemented!("Set6L"),
        CBOpcode::Set6IndHL   => unimplemented!("Set6IndHL"),
        CBOpcode::Set6A       => unimplemented!("Set6A"),
        CBOpcode::Set7B       => unimplemented!("Set7B"),
        CBOpcode::Set7C       => unimplemented!("Set7C"),
        CBOpcode::Set7D       => unimplemented!("Set7D"),
        CBOpcode::Set7E       => unimplemented!("Set7E"),
        CBOpcode::Set7H       => unimplemented!("Set7H"),
        CBOpcode::Set7L       => unimplemented!("Set7L"),
        CBOpcode::Set7IndHL   => unimplemented!("Set7IndHL"),
        CBOpcode::Set7A       => unimplemented!("Set7A")
    }
}
