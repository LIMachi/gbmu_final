use super::{Opcode, CBOpcode, ops::*, regs };

pub fn interrupt(interrupt: u8) ->  (u8, &'static [&'static [Op]]) {
    match interrupt {
        i if (i & 0x1) != 0 => (0, &[&[], &[], &[dec::sp, read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, read::INT_VBLANK, write::pc]]),
        i if (i & 0x2) != 0 => (1, &[&[], &[], &[dec::sp, read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, read::INT_STAT, write::pc]]),
        i if (i & 0x4) != 0 => (2,&[&[], &[], &[dec::sp, read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, read::INT_TIMER, write::pc]]),
        i if (i & 0x8) != 0 => (3, &[&[], &[], &[dec::sp, read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, read::INT_SERIAL, write::pc]]),
        i if (i & 0x10) != 0 => (4, &[&[], &[], &[dec::sp, read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, read::INT_JOY, write::pc]]),
        _ => unreachable!()
    }
}

pub fn decode(opcode: Opcode) -> &'static [&'static [Op]] {
    match opcode {
        Opcode::Nop          => &[&[inc::pc]],
        Opcode::LdBCd16      => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, inc::pc, mem::merge, write::bc]],
        Opcode::LdIndBCA     => &[&[inc::pc, read::bc, mem::req_write], &[read::a, write::mem]],
        Opcode::IncBC        => &[&[inc::pc], &[read::bc, inc::inc16, write::bc]],
        Opcode::IncB         => &[&[inc::pc, read::b, inc::inc, write::b]],
        Opcode::DecB         => &[&[inc::pc, read::b, dec::dec, write::b]],
        Opcode::LdBd8        => &[&[inc::pc], &[read::mem, inc::pc, write::b]],
        Opcode::Rlca         => &[&[inc::pc, bits::rlc::<{ regs::A }, true>]],
        Opcode::LdInda16SP   => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, mem::merge, inc::pc, mem::req_write], &[read::sp, write::low], &[write::mem]],
        Opcode::AddHLBC      => &[&[inc::pc], &[read::bc, alu::add_hl]],
        Opcode::LdAIndBC     => &[&[inc::pc], &[read::bc, mem::req_read], &[read::mem, write::a]],
        Opcode::DecBC        => &[&[inc::pc], &[read::bc, dec::dec16, write::bc]],
        Opcode::IncC         => &[&[inc::pc, read::c, inc::inc, write::c]],
        Opcode::DecC         => &[&[inc::pc, read::c, dec::dec, write::c]],
        Opcode::LdCd8        => &[&[inc::pc], &[read::mem, inc::pc, write::c]],
        Opcode::Rrca         => &[&[inc::pc, bits::rrc::<{ regs::A }, true>]],
        Opcode::Stop0        => &[&[inc::pc, int::stop]],
        Opcode::LdDEd16      => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, inc::pc, mem::merge, write::de]],
        Opcode::LdIndDEA     => &[&[inc::pc, read::de, mem::req_write], &[read::a, write::mem]],
        Opcode::IncDE        => &[&[inc::pc, read::de, inc::inc16, write::de]],
        Opcode::IncD         => &[&[inc::pc, read::d, inc::inc, write::d]],
        Opcode::DecD         => &[&[inc::pc, read::d, dec::dec, write::d]],
        Opcode::LdDd8        => &[&[inc::pc], &[read::mem, inc::pc, write::d]],
        Opcode::Rla          => &[&[inc::pc, bits::rl::<{ regs::A }, true>]],
        Opcode::Jrr8         => &[&[inc::pc], &[read::mem, inc::pc], &[inc::jmp]],
        Opcode::AddHLDE      => &[&[inc::pc],  &[read::de, alu::add_hl]],
        Opcode::LdAIndDE     => &[&[inc::pc, read::de, mem::req_read], &[read::mem, write::a]],
        Opcode::DecDE        => &[&[inc::pc, read::de, dec::dec16, write::de]],
        Opcode::IncE         => &[&[inc::pc, read::e, inc::inc, write::e]],
        Opcode::DecE         => &[&[inc::pc, read::e, dec::dec, write::e]],
        Opcode::LdEd8        => &[&[inc::pc], &[read::mem, inc::pc, write::e]],
        Opcode::Rra          => &[&[inc::pc, bits::rr::<{ regs::A }, true>]],
        Opcode::JrNZr8       => &[&[inc::pc], &[read::mem, inc::pc, cond::nz], &[inc::jmp]],
        Opcode::LdHLd16      => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, inc::pc, mem::merge, write::hl]],
        Opcode::LdIndHLIncA  => &[&[inc::pc, read::hl, mem::req_write], &[read::a, write::mem, inc::hl]],
        Opcode::IncHL        => &[&[inc::pc, read::hl, inc::inc16, write::hl]],
        Opcode::IncH         => &[&[inc::pc, read::h, inc::inc, write::h]],
        Opcode::DecH         => &[&[inc::pc, read::h, dec::dec, write::h]],
        Opcode::LdHd8        => &[&[inc::pc], &[read::mem, inc::pc, write::h]],
        Opcode::Daa          => &[&[inc::pc, alu::daa]],
        Opcode::JrZr8        => &[&[inc::pc], &[read::mem, inc::pc, cond::z], &[inc::jmp]],
        Opcode::AddHLHL      => &[&[inc::pc], &[read::hl, alu::add_hl]],
        Opcode::LdAIndHLInc  => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, write::a, inc::hl]],
        Opcode::DecHL        => &[&[inc::pc, read::hl, dec::dec16, write::hl]],
        Opcode::IncL         => &[&[inc::pc, read::l, inc::inc, write::l]],
        Opcode::DecL         => &[&[inc::pc, read::l, dec::dec, write::l]],
        Opcode::LdLd8        => &[&[inc::pc], &[read::mem, inc::pc, write::l]],
        Opcode::Cpl          => &[&[inc::pc, alu::cpl]],
        Opcode::JrNCr8       => &[&[inc::pc], &[read::mem, inc::pc, cond::nc], &[inc::jmp]],
        Opcode::LdSPd16      => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, inc::pc, mem::merge, write::sp]],
        Opcode::LdIndHLDecA  => &[&[inc::pc, read::hl, mem::req_write], &[read::a, write::mem, dec::hl]],
        Opcode::IncSP        => &[&[inc::pc, inc::sp]],
        Opcode::IncIndHL     => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, inc::inc, read::hl, mem::req_write], &[write::mem]],
        Opcode::DecIndHL     => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, dec::dec, read::hl, mem::req_write], &[write::mem]],
        Opcode::LdIndHLd8    => &[&[inc::pc], &[read::mem, inc::pc, read::hl, mem::req_write], &[write::mem]],
        Opcode::Scf          => &[&[inc::pc, alu::scf]],
        Opcode::JrCr8        => &[&[inc::pc], &[read::mem, inc::pc, cond::c], &[inc::jmp]],
        Opcode::AddHLSP      => &[&[inc::pc], &[read::sp, alu::add_hl]],
        Opcode::LdAIndHLDec  => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, write::a, dec::hl]],
        Opcode::DecSP        => &[&[inc::pc, dec::sp]],
        Opcode::IncA         => &[&[inc::pc, read::a, inc::inc, write::a]],
        Opcode::DecA         => &[&[inc::pc, read::a, dec::dec, write::a]],
        Opcode::LdAd8        => &[&[inc::pc], &[read::mem, inc::pc, write::a]],
        Opcode::Ccf          => &[&[inc::pc, alu::ccf]],
        Opcode::LdBB         => &[&[inc::pc]],
        Opcode::LdBC         => &[&[inc::pc, read::c, write::b]],
        Opcode::LdBD         => &[&[inc::pc, read::d, write::b]],
        Opcode::LdBE         => &[&[inc::pc, read::e, write::b]],
        Opcode::LdBH         => &[&[inc::pc, read::h, write::b]],
        Opcode::LdBL         => &[&[inc::pc, read::l, write::b]],
        Opcode::LdBIndHL     => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, write::b]],
        Opcode::LdBA         => &[&[inc::pc, read::a, write::b]],
        Opcode::LdCB         => &[&[inc::pc, read::b, write::c]],
        Opcode::LdCC         => &[&[inc::pc]],
        Opcode::LdCD         => &[&[inc::pc, read::d, write::c]],
        Opcode::LdCE         => &[&[inc::pc, read::e, write::c]],
        Opcode::LdCH         => &[&[inc::pc, read::h, write::c]],
        Opcode::LdCL         => &[&[inc::pc, read::l, write::c]],
        Opcode::LdCIndHL     => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, write::c]],
        Opcode::LdCA         => &[&[inc::pc, read::a, write::c]],
        Opcode::LdDB         => &[&[inc::pc, read::b, write::d]],
        Opcode::LdDC         => &[&[inc::pc, read::c, write::d]],
        Opcode::LdDD         => &[&[inc::pc]],
        Opcode::LdDE         => &[&[inc::pc, read::e, write::d]],
        Opcode::LdDH         => &[&[inc::pc, read::h, write::d]],
        Opcode::LdDL         => &[&[inc::pc, read::l, write::d]],
        Opcode::LdDIndHL     => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, write::d]],
        Opcode::LdDA         => &[&[inc::pc, read::a, write::d]],
        Opcode::LdEB         => &[&[inc::pc, read::b, write::e]],
        Opcode::LdEC         => &[&[inc::pc, read::c, write::e]],
        Opcode::LdED         => &[&[inc::pc, read::d, write::e]],
        Opcode::LdEE         => &[&[inc::pc]],
        Opcode::LdEH         => &[&[inc::pc, read::h, write::e]],
        Opcode::LdEL         => &[&[inc::pc, read::l, write::e]],
        Opcode::LdEIndHL     => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, write::e]],
        Opcode::LdEA         => &[&[inc::pc, read::a, write::e]],
        Opcode::LdHB         => &[&[inc::pc, read::b, write::h]],
        Opcode::LdHC         => &[&[inc::pc, read::c, write::h]],
        Opcode::LdHD         => &[&[inc::pc, read::d, write::h]],
        Opcode::LdHE         => &[&[inc::pc, read::e, write::h]],
        Opcode::LdHH         => &[&[inc::pc]],
        Opcode::LdHL         => &[&[inc::pc, read::l, write::h]],
        Opcode::LdHIndHL     => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, write::h]],
        Opcode::LdHA         => &[&[inc::pc, read::a, write::h]],
        Opcode::LdLB         => &[&[inc::pc, read::b, write::l]],
        Opcode::LdLC         => &[&[inc::pc, read::c, write::l]],
        Opcode::LdLD         => &[&[inc::pc, read::d, write::l]],
        Opcode::LdLE         => &[&[inc::pc, read::e, write::l]],
        Opcode::LdLH         => &[&[inc::pc, read::h, write::l]],
        Opcode::LdLL         => &[&[inc::pc]],
        Opcode::LdLIndHL     => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, write::l]],
        Opcode::LdLA         => &[&[inc::pc, read::a, write::l]],
        Opcode::LdIndHLB     => &[&[inc::pc, read::hl, mem::req_write], &[read::b, write::mem]],
        Opcode::LdIndHLC     => &[&[inc::pc, read::hl, mem::req_write], &[read::c, write::mem]],
        Opcode::LdIndHLD     => &[&[inc::pc, read::hl, mem::req_write], &[read::d, write::mem]],
        Opcode::LdIndHLE     => &[&[inc::pc, read::hl, mem::req_write], &[read::e, write::mem]],
        Opcode::LdIndHLH     => &[&[inc::pc, read::hl, mem::req_write], &[read::h, write::mem]],
        Opcode::LdIndHLL     => &[&[inc::pc, read::hl, mem::req_write], &[read::l, write::mem]],
        Opcode::Halt         => &[&[inc::pc, int::halt]],
        Opcode::LdIndHLA     => &[&[inc::pc, read::hl, mem::req_write], &[read::a, write::mem]],
        Opcode::LdAB         => &[&[inc::pc, read::b, write::a]],
        Opcode::LdAC         => &[&[inc::pc, read::c, write::a]],
        Opcode::LdAD         => &[&[inc::pc, read::d, write::a]],
        Opcode::LdAE         => &[&[inc::pc, read::e, write::a]],
        Opcode::LdAH         => &[&[inc::pc, read::h, write::a]],
        Opcode::LdAL         => &[&[inc::pc, read::l, write::a]],
        Opcode::LdAIndHL     => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, write::a]],
        Opcode::LdAA         => &[&[inc::pc]],
        Opcode::AddAB        => &[&[inc::pc, read::b, alu::add]],
        Opcode::AddAC        => &[&[inc::pc, read::c, alu::add]],
        Opcode::AddAD        => &[&[inc::pc, read::d, alu::add]],
        Opcode::AddAE        => &[&[inc::pc, read::e, alu::add]],
        Opcode::AddAH        => &[&[inc::pc, read::h, alu::add]],
        Opcode::AddAL        => &[&[inc::pc, read::l, alu::add]],
        Opcode::AddAIndHL    => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, alu::add]],
        Opcode::AddAA        => &[&[inc::pc, read::a, alu::add]],
        Opcode::AdcAB        => &[&[inc::pc, read::b, alu::adc]],
        Opcode::AdcAC        => &[&[inc::pc, read::c, alu::adc]],
        Opcode::AdcAD        => &[&[inc::pc, read::d, alu::adc]],
        Opcode::AdcAE        => &[&[inc::pc, read::e, alu::adc]],
        Opcode::AdcAH        => &[&[inc::pc, read::h, alu::adc]],
        Opcode::AdcAL        => &[&[inc::pc, read::l, alu::adc]],
        Opcode::AdcAIndHL    => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, alu::adc]],
        Opcode::AdcAA        => &[&[inc::pc, read::a, alu::adc]],
        Opcode::SubB         => &[&[inc::pc, read::b, alu::sub]],
        Opcode::SubC         => &[&[inc::pc, read::c, alu::sub]],
        Opcode::SubD         => &[&[inc::pc, read::d, alu::sub]],
        Opcode::SubE         => &[&[inc::pc, read::e, alu::sub]],
        Opcode::SubH         => &[&[inc::pc, read::h, alu::sub]],
        Opcode::SubL         => &[&[inc::pc, read::l, alu::sub]],
        Opcode::SubIndHL     => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, alu::sub]],
        Opcode::SubA         => &[&[inc::pc, read::a, alu::sub]],
        Opcode::SbcAB        => &[&[inc::pc, read::b, alu::sbc]],
        Opcode::SbcAC        => &[&[inc::pc, read::c, alu::sbc]],
        Opcode::SbcAD        => &[&[inc::pc, read::d, alu::sbc]],
        Opcode::SbcAE        => &[&[inc::pc, read::e, alu::sbc]],
        Opcode::SbcAH        => &[&[inc::pc, read::h, alu::sbc]],
        Opcode::SbcAL        => &[&[inc::pc, read::l, alu::sbc]],
        Opcode::SbcAIndHL    => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, alu::sbc]],
        Opcode::SbcAA        => &[&[inc::pc, read::a, alu::sbc]],
        Opcode::AndB         => &[&[inc::pc, read::b, alu::and]],
        Opcode::AndC         => &[&[inc::pc, read::c, alu::and]],
        Opcode::AndD         => &[&[inc::pc, read::d, alu::and]],
        Opcode::AndE         => &[&[inc::pc, read::e, alu::and]],
        Opcode::AndH         => &[&[inc::pc, read::h, alu::and]],
        Opcode::AndL         => &[&[inc::pc, read::l, alu::and]],
        Opcode::AndIndHL     => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, alu::and]],
        Opcode::AndA         => &[&[inc::pc, read::a, alu::and]],
        Opcode::XorB         => &[&[inc::pc, read::b, alu::xor]],
        Opcode::XorC         => &[&[inc::pc, read::c, alu::xor]],
        Opcode::XorD         => &[&[inc::pc, read::d, alu::xor]],
        Opcode::XorE         => &[&[inc::pc, read::e, alu::xor]],
        Opcode::XorH         => &[&[inc::pc, read::h, alu::xor]],
        Opcode::XorL         => &[&[inc::pc, read::l, alu::xor]],
        Opcode::XorIndHL     => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, alu::xor]],
        Opcode::XorA         => &[&[inc::pc, read::a, alu::xor]],
        Opcode::OrB          => &[&[inc::pc, read::b, alu::or]],
        Opcode::OrC          => &[&[inc::pc, read::c, alu::or]],
        Opcode::OrD          => &[&[inc::pc, read::d, alu::or]],
        Opcode::OrE          => &[&[inc::pc, read::e, alu::or]],
        Opcode::OrH          => &[&[inc::pc, read::h, alu::or]],
        Opcode::OrL          => &[&[inc::pc, read::l, alu::or]],
        Opcode::OrIndHL      => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, alu::or]],
        Opcode::OrA          => &[&[inc::pc, read::a, alu::or]],
        Opcode::CpB          => &[&[inc::pc, read::b, alu::cmp]],
        Opcode::CpC          => &[&[inc::pc, read::c, alu::cmp]],
        Opcode::CpD          => &[&[inc::pc, read::d, alu::cmp]],
        Opcode::CpE          => &[&[inc::pc, read::e, alu::cmp]],
        Opcode::CpH          => &[&[inc::pc, read::h, alu::cmp]],
        Opcode::CpL          => &[&[inc::pc, read::l, alu::cmp]],
        Opcode::CpIndHL      => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, alu::cmp]],
        Opcode::CpA          => &[&[inc::pc, read::a, alu::cmp]],
        Opcode::RetNZ        => &[&[inc::pc], &[cond::nz, read::sp, mem::req_read], &[read::mem, inc::sp, read::sp, mem::req_read], &[read::mem, inc::sp, mem::merge], &[write::pc]],
        Opcode::PopBC        => &[&[inc::pc, read::sp, mem::req_read], &[read::mem, write::c, inc::sp, read::sp, mem::req_read], &[read::mem, write::b, inc::sp]],
        Opcode::JpNZa16      => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, mem::merge, inc::pc, cond::nz], &[write::pc]],
        Opcode::Jpa16        => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem], &[mem::merge, write::pc]],
        Opcode::CallNZa16    => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, inc::pc, cond::nz, dec::sp], &[read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, mem::merge, write::pc]],
        Opcode::PushBC       => &[&[inc::pc, dec::sp], &[read::sp, mem::req_write, dec::sp], &[read::b, write::mem, read::sp, mem::req_write], &[read::c, write::mem]],
        Opcode::AddAd8       => &[&[inc::pc], &[read::mem, inc::pc, alu::add]],
        Opcode::Rst00H       => &[&[inc::pc, read::FIXED_0], &[dec::sp, read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, write::pc]],
        Opcode::RetZ         => &[&[inc::pc], &[cond::z, read::sp, mem::req_read], &[read::mem, inc::sp, read::sp, mem::req_read], &[read::mem, inc::sp, mem::merge], &[write::pc]],
        Opcode::Ret          => &[&[read::sp, mem::req_read], &[read::mem, inc::sp, read::sp, mem::req_read], &[read::mem, inc::sp, mem::merge], &[write::pc]],
        Opcode::JpZa16       => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, mem::merge, inc::pc, cond::z], &[write::pc]],
        Opcode::PrefixCB     => &[&[inc::pc, mem::cb]],
        Opcode::CallZa16     => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, inc::pc, cond::z, dec::sp], &[read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, mem::merge, write::pc]],
        Opcode::Calla16      => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, inc::pc, dec::sp], &[read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, mem::merge, write::pc]],
        Opcode::AdcAd8       => &[&[inc::pc], &[read::mem, inc::pc, alu::adc]],
        Opcode::Rst08H       => &[&[inc::pc, read::FIXED_8], &[dec::sp, read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, write::pc]],
        Opcode::RetNC        => &[&[inc::pc], &[cond::nc, read::sp, mem::req_read], &[read::mem, inc::sp, read::sp, mem::req_read], &[read::mem, inc::sp, mem::merge], &[write::pc]],
        Opcode::PopDE        => &[&[inc::pc, read::sp, mem::req_read], &[read::mem, write::e, inc::sp, read::sp, mem::req_read], &[read::mem, write::d, inc::sp]],
        Opcode::JpNCa16      => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, mem::merge, inc::pc, cond::nc], &[write::pc]],
        Opcode::CallNCa16    => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, inc::pc, cond::nc, dec::sp], &[read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, mem::merge, write::pc]],
        Opcode::PushDE       => &[&[inc::pc, dec::sp], &[read::sp, mem::req_write, dec::sp], &[read::d, write::mem, read::sp, mem::req_write], &[read::e, write::mem]],
        Opcode::Subd8        => &[&[inc::pc], &[read::mem, inc::pc, alu::sub]],
        Opcode::Rst10H       => &[&[inc::pc, read::FIXED_10], &[dec::sp, read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, write::pc]],
        Opcode::RetC         => &[&[inc::pc], &[cond::c, read::sp, mem::req_read], &[read::mem, inc::sp, read::sp, mem::req_read], &[read::mem, inc::sp, mem::merge], &[write::pc]],
        Opcode::Reti         => &[&[read::sp, mem::req_read], &[read::mem, inc::sp, read::sp, mem::req_read], &[read::mem, inc::sp, mem::merge], &[write::pc, int::on]],
        Opcode::JpCa16       => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, inc::pc, mem::merge, cond::c], &[write::pc]],
        Opcode::CallCa16     => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, inc::pc, cond::c, dec::sp], &[read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, mem::merge, write::pc]],
        Opcode::SbcAd8       => &[&[inc::pc], &[read::mem, inc::pc, alu::sbc]],
        Opcode::Rst18H       => &[&[inc::pc, read::FIXED_18], &[dec::sp, read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, write::pc]],
        Opcode::LdhInda8A    => &[&[inc::pc], &[read::mem, mem::req_write_u8, inc::pc], &[read::a, write::mem]],
        Opcode::PopHL        => &[&[inc::pc, read::sp, mem::req_read], &[read::mem, write::l, inc::sp, read::sp, mem::req_read], &[read::mem, write::h, inc::sp]],
        Opcode::LdIndCA      => &[&[inc::pc, read::c, mem::req_write_u8], &[read::a, write::mem]],
        Opcode::PushHL       => &[&[inc::pc, dec::sp], &[read::sp, mem::req_write, dec::sp], &[read::h, write::mem, read::sp, mem::req_write], &[read::l, write::mem]],
        Opcode::Andd8        => &[&[inc::pc], &[read::mem, inc::pc, alu::and]],
        Opcode::Rst20H       => &[&[inc::pc, read::FIXED_20], &[dec::sp, read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, write::pc]],
        Opcode::AddSPr8      => &[&[inc::pc], &[read::mem], &[alu::add_sp], &[write::sp, inc::pc]],
        Opcode::JpHL         => &[&[read::hl, write::pc]],
        Opcode::LdInda16A    => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, mem::merge, mem::req_write], &[read::a, write::mem, inc::pc]],
        Opcode::Xord8        => &[&[inc::pc], &[read::mem, inc::pc, alu::xor]],
        Opcode::Rst28H       => &[&[inc::pc, read::FIXED_28], &[dec::sp, read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, write::pc]],
        Opcode::LdhAInda8    => &[&[inc::pc], &[read::mem, mem::req_read_u8, inc::pc], &[read::mem, write::a]],
        Opcode::PopAF        => &[&[inc::pc, read::sp, mem::req_read], &[read::mem, write::f, inc::sp, read::sp, mem::req_read], &[read::mem, write::a, inc::sp]],
        Opcode::LdAIndC      => &[&[inc::pc, read::c, mem::req_read_u8], &[read::mem, write::a]],
        Opcode::Di           => &[&[inc::pc, int::off]],
        Opcode::PushAF       => &[&[inc::pc, dec::sp], &[read::sp, mem::req_write, dec::sp], &[read::a, write::mem, read::sp, mem::req_write], &[read::f, write::mem]],
        Opcode::Ord8         => &[&[inc::pc], &[read::mem, inc::pc, alu::or]],
        Opcode::Rst30H       => &[&[inc::pc, read::FIXED_30], &[dec::sp, read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, write::pc]],
        Opcode::LdHLSPaddr8  => &[&[inc::pc], &[read::mem, alu::add_sp], &[write::hl, inc::pc]],
        Opcode::LdSPHL       => &[&[inc::pc], &[read::hl, write::sp]],
        Opcode::LdAInda16    => &[&[inc::pc], &[read::mem, inc::pc], &[read::mem, inc::pc, mem::merge, mem::req_read], &[read::mem, write::a]],
        Opcode::Ei           => &[&[inc::pc, int::on]],
        Opcode::Cpd8         => &[&[inc::pc], &[read::mem, inc::pc, alu::cmp]],
        Opcode::Rst38H       => &[&[inc::pc, read::FIXED_38], &[dec::sp, read::pc, mem::split, mem::write_sp], &[write::mem, dec::sp, mem::write_sp], &[write::mem, write::pc]],
        Opcode::Invalid(_n)         => &[&[inc::pc]],
        Opcode::CB(opcode)   => decode_cb(opcode)
    }
}

fn decode_cb(opcode: CBOpcode) -> &'static [&'static [Op]] {
    match opcode {
        CBOpcode::RlcB        => &[&[inc::pc, bits::rlc::<{ regs::B }, false>]],
        CBOpcode::RlcC        => &[&[inc::pc, bits::rlc::<{ regs::C }, false>]],
        CBOpcode::RlcD        => &[&[inc::pc, bits::rlc::<{ regs::D }, false>]],
        CBOpcode::RlcE        => &[&[inc::pc, bits::rlc::<{ regs::E }, false>]],
        CBOpcode::RlcH        => &[&[inc::pc, bits::rlc::<{ regs::H }, false>]],
        CBOpcode::RlcL        => &[&[inc::pc, bits::rlc::<{ regs::L }, false>]],
        CBOpcode::RlcIndHL    => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::rlc::<{ regs::ST }, false>, read::hl, mem::req_write], &[write::mem]],
        CBOpcode::RlcA        => &[&[inc::pc, bits::rlc::<{ regs::A }, false>]],
        CBOpcode::RrcB        => &[&[inc::pc, bits::rrc::<{ regs::B }, false>]],
        CBOpcode::RrcC        => &[&[inc::pc, bits::rrc::<{ regs::C }, false>]],
        CBOpcode::RrcD        => &[&[inc::pc, bits::rrc::<{ regs::D }, false>]],
        CBOpcode::RrcE        => &[&[inc::pc, bits::rrc::<{ regs::E }, false>]],
        CBOpcode::RrcH        => &[&[inc::pc, bits::rrc::<{ regs::H }, false>]],
        CBOpcode::RrcL        => &[&[inc::pc, bits::rrc::<{ regs::L }, false>]],
        CBOpcode::RrcIndHL    => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::rrc::<{ regs::ST }, false>, read::hl, mem::req_write], &[write::mem]],
        CBOpcode::RrcA        => &[&[inc::pc, bits::rrc::<{ regs::A }, false>]],
        CBOpcode::RlB         => &[&[inc::pc, bits::rl::<{ regs::B }, false>]],
        CBOpcode::RlC         => &[&[inc::pc, bits::rl::<{ regs::C }, false>]],
        CBOpcode::RlD         => &[&[inc::pc, bits::rl::<{ regs::D }, false>]],
        CBOpcode::RlE         => &[&[inc::pc, bits::rl::<{ regs::E }, false>]],
        CBOpcode::RlH         => &[&[inc::pc, bits::rl::<{ regs::H }, false>]],
        CBOpcode::RlL         => &[&[inc::pc, bits::rl::<{ regs::L }, false>]],
        CBOpcode::RlIndHL     => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::rl::<{ regs::ST }, false>, read::hl, mem::req_write], &[write::mem]],
        CBOpcode::RlA         => &[&[inc::pc, bits::rl::<{ regs::A }, false>]],
        CBOpcode::RrB         => &[&[inc::pc, bits::rr::<{ regs::B }, false>]],
        CBOpcode::RrC         => &[&[inc::pc, bits::rr::<{ regs::C }, false>]],
        CBOpcode::RrD         => &[&[inc::pc, bits::rr::<{ regs::D }, false>]],
        CBOpcode::RrE         => &[&[inc::pc, bits::rr::<{ regs::E }, false>]],
        CBOpcode::RrH         => &[&[inc::pc, bits::rr::<{ regs::H }, false>]],
        CBOpcode::RrL         => &[&[inc::pc, bits::rr::<{ regs::L }, false>]],
        CBOpcode::RrIndHL     => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::rr::<{ regs::ST }, false>, read::hl, mem::req_write], &[write::mem]],
        CBOpcode::RrA         => &[&[inc::pc, bits::rr::<{ regs::A }, false>]],
        CBOpcode::SlaB        => &[&[inc::pc, bits::sla::<{ regs::B }>]],
        CBOpcode::SlaC        => &[&[inc::pc, bits::sla::<{ regs::C }>]],
        CBOpcode::SlaD        => &[&[inc::pc, bits::sla::<{ regs::D }>]],
        CBOpcode::SlaE        => &[&[inc::pc, bits::sla::<{ regs::E }>]],
        CBOpcode::SlaH        => &[&[inc::pc, bits::sla::<{ regs::H }>]],
        CBOpcode::SlaL        => &[&[inc::pc, bits::sla::<{ regs::L }>]],
        CBOpcode::SlaIndHL    => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::sla::<{ regs::ST }>, read::hl, mem::req_write], &[write::mem]],
        CBOpcode::SlaA        => &[&[inc::pc, bits::sla::<{ regs::A }>]],
        CBOpcode::SraB        => &[&[inc::pc, bits::sra::<{ regs::B }>]],
        CBOpcode::SraC        => &[&[inc::pc, bits::sra::<{ regs::C }>]],
        CBOpcode::SraD        => &[&[inc::pc, bits::sra::<{ regs::D }>]],
        CBOpcode::SraE        => &[&[inc::pc, bits::sra::<{ regs::E }>]],
        CBOpcode::SraH        => &[&[inc::pc, bits::sra::<{ regs::H }>]],
        CBOpcode::SraL        => &[&[inc::pc, bits::sra::<{ regs::L }>]],
        CBOpcode::SraIndHL    => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::sra::<{ regs::ST }>, read::hl, mem::req_write], &[write::mem]],
        CBOpcode::SraA        => &[&[inc::pc, bits::sra::<{ regs::A }>]],
        CBOpcode::SwapB       => &[&[inc::pc, bits::swap::<{ regs::B }>]],
        CBOpcode::SwapC       => &[&[inc::pc, bits::swap::<{ regs::C }>]],
        CBOpcode::SwapD       => &[&[inc::pc, bits::swap::<{ regs::D }>]],
        CBOpcode::SwapE       => &[&[inc::pc, bits::swap::<{ regs::E }>]],
        CBOpcode::SwapH       => &[&[inc::pc, bits::swap::<{ regs::H }>]],
        CBOpcode::SwapL       => &[&[inc::pc, bits::swap::<{ regs::L }>]],
        CBOpcode::SwapIndHL   => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::swap::<{ regs::ST }>, read::hl, mem::req_write], &[write::mem]],
        CBOpcode::SwapA       => &[&[inc::pc, bits::swap::<{ regs::A }>]],
        CBOpcode::SrlB        => &[&[inc::pc, bits::srl::<{ regs::B }>]],
        CBOpcode::SrlC        => &[&[inc::pc, bits::srl::<{ regs::C }>]],
        CBOpcode::SrlD        => &[&[inc::pc, bits::srl::<{ regs::D }>]],
        CBOpcode::SrlE        => &[&[inc::pc, bits::srl::<{ regs::E }>]],
        CBOpcode::SrlH        => &[&[inc::pc, bits::srl::<{ regs::H }>]],
        CBOpcode::SrlL        => &[&[inc::pc, bits::srl::<{ regs::L }>]],
        CBOpcode::SrlIndHL    => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::srl::<{ regs::ST }>, read::hl, mem::req_write], &[write::mem]],
        CBOpcode::SrlA        => &[&[inc::pc, bits::srl::<{ regs::A }>]],
        CBOpcode::Bit0B       => &[&[inc::pc, bits::bit::<0, { regs::B }>]],
        CBOpcode::Bit0C       => &[&[inc::pc, bits::bit::<0, { regs::C }>]],
        CBOpcode::Bit0D       => &[&[inc::pc, bits::bit::<0, { regs::D }>]],
        CBOpcode::Bit0E       => &[&[inc::pc, bits::bit::<0, { regs::E }>]],
        CBOpcode::Bit0H       => &[&[inc::pc, bits::bit::<0, { regs::H }>]],
        CBOpcode::Bit0L       => &[&[inc::pc, bits::bit::<0, { regs::L }>]],
        CBOpcode::Bit0IndHL   => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::bit::<0, { regs::ST }>]],
        CBOpcode::Bit0A       => &[&[inc::pc, bits::bit::<0, { regs::A }>]],
        CBOpcode::Bit1B       => &[&[inc::pc, bits::bit::<1, { regs::B }>]],
        CBOpcode::Bit1C       => &[&[inc::pc, bits::bit::<1, { regs::C }>]],
        CBOpcode::Bit1D       => &[&[inc::pc, bits::bit::<1, { regs::D }>]],
        CBOpcode::Bit1E       => &[&[inc::pc, bits::bit::<1, { regs::E }>]],
        CBOpcode::Bit1H       => &[&[inc::pc, bits::bit::<1, { regs::H }>]],
        CBOpcode::Bit1L       => &[&[inc::pc, bits::bit::<1, { regs::L }>]],
        CBOpcode::Bit1IndHL   => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::bit::<1, { regs::ST }>]],
        CBOpcode::Bit1A       => &[&[inc::pc, bits::bit::<1, { regs::A }>]],
        CBOpcode::Bit2B       => &[&[inc::pc, bits::bit::<2, { regs::B }>]],
        CBOpcode::Bit2C       => &[&[inc::pc, bits::bit::<2, { regs::C }>]],
        CBOpcode::Bit2D       => &[&[inc::pc, bits::bit::<2, { regs::D }>]],
        CBOpcode::Bit2E       => &[&[inc::pc, bits::bit::<2, { regs::E }>]],
        CBOpcode::Bit2H       => &[&[inc::pc, bits::bit::<2, { regs::H }>]],
        CBOpcode::Bit2L       => &[&[inc::pc, bits::bit::<2, { regs::L }>]],
        CBOpcode::Bit2IndHL   => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::bit::<2, { regs::ST }>]],
        CBOpcode::Bit2A       => &[&[inc::pc, bits::bit::<2, { regs::A }>]],
        CBOpcode::Bit3B       => &[&[inc::pc, bits::bit::<3, { regs::B }>]],
        CBOpcode::Bit3C       => &[&[inc::pc, bits::bit::<3, { regs::C }>]],
        CBOpcode::Bit3D       => &[&[inc::pc, bits::bit::<3, { regs::D }>]],
        CBOpcode::Bit3E       => &[&[inc::pc, bits::bit::<3, { regs::E }>]],
        CBOpcode::Bit3H       => &[&[inc::pc, bits::bit::<3, { regs::H }>]],
        CBOpcode::Bit3L       => &[&[inc::pc, bits::bit::<3, { regs::L }>]],
        CBOpcode::Bit3IndHL   => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::bit::<3, { regs::ST }>]],
        CBOpcode::Bit3A       => &[&[inc::pc, bits::bit::<3, { regs::A }>]],
        CBOpcode::Bit4B       => &[&[inc::pc, bits::bit::<4, { regs::B }>]],
        CBOpcode::Bit4C       => &[&[inc::pc, bits::bit::<4, { regs::C }>]],
        CBOpcode::Bit4D       => &[&[inc::pc, bits::bit::<4, { regs::D }>]],
        CBOpcode::Bit4E       => &[&[inc::pc, bits::bit::<4, { regs::E }>]],
        CBOpcode::Bit4H       => &[&[inc::pc, bits::bit::<4, { regs::H }>]],
        CBOpcode::Bit4L       => &[&[inc::pc, bits::bit::<4, { regs::L }>]],
        CBOpcode::Bit4IndHL   => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::bit::<4, { regs::ST }>]],
        CBOpcode::Bit4A       => &[&[inc::pc, bits::bit::<4, { regs::A }>]],
        CBOpcode::Bit5B       => &[&[inc::pc, bits::bit::<5, { regs::B }>]],
        CBOpcode::Bit5C       => &[&[inc::pc, bits::bit::<5, { regs::C }>]],
        CBOpcode::Bit5D       => &[&[inc::pc, bits::bit::<5, { regs::D }>]],
        CBOpcode::Bit5E       => &[&[inc::pc, bits::bit::<5, { regs::E }>]],
        CBOpcode::Bit5H       => &[&[inc::pc, bits::bit::<5, { regs::H }>]],
        CBOpcode::Bit5L       => &[&[inc::pc, bits::bit::<5, { regs::L }>]],
        CBOpcode::Bit5IndHL   => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::bit::<5, { regs::ST }>]],
        CBOpcode::Bit5A       => &[&[inc::pc, bits::bit::<5, { regs::A }>]],
        CBOpcode::Bit6B       => &[&[inc::pc, bits::bit::<6, { regs::B }>]],
        CBOpcode::Bit6C       => &[&[inc::pc, bits::bit::<6, { regs::C }>]],
        CBOpcode::Bit6D       => &[&[inc::pc, bits::bit::<6, { regs::D }>]],
        CBOpcode::Bit6E       => &[&[inc::pc, bits::bit::<6, { regs::E }>]],
        CBOpcode::Bit6H       => &[&[inc::pc, bits::bit::<6, { regs::H }>]],
        CBOpcode::Bit6L       => &[&[inc::pc, bits::bit::<6, { regs::L }>]],
        CBOpcode::Bit6IndHL   => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::bit::<6, { regs::ST }>]],
        CBOpcode::Bit6A       => &[&[inc::pc, bits::bit::<6, { regs::A }>]],
        CBOpcode::Bit7B       => &[&[inc::pc, bits::bit::<7, { regs::B }>]],
        CBOpcode::Bit7C       => &[&[inc::pc, bits::bit::<7, { regs::C }>]],
        CBOpcode::Bit7D       => &[&[inc::pc, bits::bit::<7, { regs::D }>]],
        CBOpcode::Bit7E       => &[&[inc::pc, bits::bit::<7, { regs::E }>]],
        CBOpcode::Bit7H       => &[&[inc::pc, bits::bit::<7, { regs::H }>]],
        CBOpcode::Bit7L       => &[&[inc::pc, bits::bit::<7, { regs::L }>]],
        CBOpcode::Bit7IndHL   => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::bit::<7, { regs::ST }>]],
        CBOpcode::Bit7A       => &[&[inc::pc, bits::bit::<7, { regs::A }>]],
        CBOpcode::Res0B       => &[&[inc::pc, bits::res::<0, { regs::B }>]],
        CBOpcode::Res0C       => &[&[inc::pc, bits::res::<0, { regs::C }>]],
        CBOpcode::Res0D       => &[&[inc::pc, bits::res::<0, { regs::D }>]],
        CBOpcode::Res0E       => &[&[inc::pc, bits::res::<0, { regs::E }>]],
        CBOpcode::Res0H       => &[&[inc::pc, bits::res::<0, { regs::H }>]],
        CBOpcode::Res0L       => &[&[inc::pc, bits::res::<0, { regs::L }>]],
        CBOpcode::Res0IndHL   => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::res::<0, { regs::ST }>, read::hl, mem::req_write], &[write::mem]],
        CBOpcode::Res0A       => &[&[inc::pc, bits::res::<0, { regs::A }>]],
        CBOpcode::Res1B       => &[&[inc::pc, bits::res::<1, { regs::B }>]],
        CBOpcode::Res1C       => &[&[inc::pc, bits::res::<1, { regs::C }>]],
        CBOpcode::Res1D       => &[&[inc::pc, bits::res::<1, { regs::D }>]],
        CBOpcode::Res1E       => &[&[inc::pc, bits::res::<1, { regs::E }>]],
        CBOpcode::Res1H       => &[&[inc::pc, bits::res::<1, { regs::H }>]],
        CBOpcode::Res1L       => &[&[inc::pc, bits::res::<1, { regs::L }>]],
        CBOpcode::Res1IndHL   => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::res::<1, { regs::ST }>, read::hl, mem::req_write], &[write::mem]],
        CBOpcode::Res1A       => &[&[inc::pc, bits::res::<1, { regs::A }>]],
        CBOpcode::Res2B       => &[&[inc::pc, bits::res::<2, { regs::B }>]],
        CBOpcode::Res2C       => &[&[inc::pc, bits::res::<2, { regs::C }>]],
        CBOpcode::Res2D       => &[&[inc::pc, bits::res::<2, { regs::D }>]],
        CBOpcode::Res2E       => &[&[inc::pc, bits::res::<2, { regs::E }>]],
        CBOpcode::Res2H       => &[&[inc::pc, bits::res::<2, { regs::H }>]],
        CBOpcode::Res2L       => &[&[inc::pc, bits::res::<2, { regs::L }>]],
        CBOpcode::Res2IndHL   => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::res::<2, { regs::ST }>, read::hl, mem::req_write], &[write::mem]],
        CBOpcode::Res2A       => &[&[inc::pc, bits::res::<2, { regs::A }>]],
        CBOpcode::Res3B       => &[&[inc::pc, bits::res::<3, { regs::B }>]],
        CBOpcode::Res3C       => &[&[inc::pc, bits::res::<3, { regs::C }>]],
        CBOpcode::Res3D       => &[&[inc::pc, bits::res::<3, { regs::D }>]],
        CBOpcode::Res3E       => &[&[inc::pc, bits::res::<3, { regs::E }>]],
        CBOpcode::Res3H       => &[&[inc::pc, bits::res::<3, { regs::H }>]],
        CBOpcode::Res3L       => &[&[inc::pc, bits::res::<3, { regs::L }>]],
        CBOpcode::Res3IndHL   => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::res::<3, { regs::ST }>, read::hl, mem::req_write], &[write::mem]],
        CBOpcode::Res3A       => &[&[inc::pc, bits::res::<3, { regs::A }>]],
        CBOpcode::Res4B       => &[&[inc::pc, bits::res::<4, { regs::B }>]],
        CBOpcode::Res4C       => &[&[inc::pc, bits::res::<4, { regs::C }>]],
        CBOpcode::Res4D       => &[&[inc::pc, bits::res::<4, { regs::D }>]],
        CBOpcode::Res4E       => &[&[inc::pc, bits::res::<4, { regs::E }>]],
        CBOpcode::Res4H       => &[&[inc::pc, bits::res::<4, { regs::H }>]],
        CBOpcode::Res4L       => &[&[inc::pc, bits::res::<4, { regs::L }>]],
        CBOpcode::Res4IndHL   => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::res::<4, { regs::ST }>, read::hl, mem::req_write], &[write::mem]],
        CBOpcode::Res4A       => &[&[inc::pc, bits::res::<4, { regs::A }>]],
        CBOpcode::Res5B       => &[&[inc::pc, bits::res::<5, { regs::B }>]],
        CBOpcode::Res5C       => &[&[inc::pc, bits::res::<5, { regs::C }>]],
        CBOpcode::Res5D       => &[&[inc::pc, bits::res::<5, { regs::D }>]],
        CBOpcode::Res5E       => &[&[inc::pc, bits::res::<5, { regs::E }>]],
        CBOpcode::Res5H       => &[&[inc::pc, bits::res::<5, { regs::H }>]],
        CBOpcode::Res5L       => &[&[inc::pc, bits::res::<5, { regs::L }>]],
        CBOpcode::Res5IndHL   => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::res::<5, { regs::ST }>, read::hl, mem::req_write], &[write::mem]],
        CBOpcode::Res5A       => &[&[inc::pc, bits::res::<5, { regs::A }>]],
        CBOpcode::Res6B       => &[&[inc::pc, bits::res::<6, { regs::B }>]],
        CBOpcode::Res6C       => &[&[inc::pc, bits::res::<6, { regs::C }>]],
        CBOpcode::Res6D       => &[&[inc::pc, bits::res::<6, { regs::D }>]],
        CBOpcode::Res6E       => &[&[inc::pc, bits::res::<6, { regs::E }>]],
        CBOpcode::Res6H       => &[&[inc::pc, bits::res::<6, { regs::H }>]],
        CBOpcode::Res6L       => &[&[inc::pc, bits::res::<6, { regs::L }>]],
        CBOpcode::Res6IndHL   => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::res::<6, { regs::ST }>, read::hl, mem::req_write], &[write::mem]],
        CBOpcode::Res6A       => &[&[inc::pc, bits::res::<6, { regs::A }>]],
        CBOpcode::Res7B       => &[&[inc::pc, bits::res::<7, { regs::B }>]],
        CBOpcode::Res7C       => &[&[inc::pc, bits::res::<7, { regs::C }>]],
        CBOpcode::Res7D       => &[&[inc::pc, bits::res::<7, { regs::D }>]],
        CBOpcode::Res7E       => &[&[inc::pc, bits::res::<7, { regs::E }>]],
        CBOpcode::Res7H       => &[&[inc::pc, bits::res::<7, { regs::H }>]],
        CBOpcode::Res7L       => &[&[inc::pc, bits::res::<7, { regs::L }>]],
        CBOpcode::Res7IndHL   => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::res::<7, { regs::ST }>, read::hl, mem::req_write], &[write::mem]],
        CBOpcode::Res7A       => &[&[inc::pc, bits::res::<7, { regs::A }>]],
        CBOpcode::Set0B       => &[&[inc::pc, bits::set::<0, { regs::B }>]],
        CBOpcode::Set0C       => &[&[inc::pc, bits::set::<0, { regs::C }>]],
        CBOpcode::Set0D       => &[&[inc::pc, bits::set::<0, { regs::D }>]],
        CBOpcode::Set0E       => &[&[inc::pc, bits::set::<0, { regs::E }>]],
        CBOpcode::Set0H       => &[&[inc::pc, bits::set::<0, { regs::H }>]],
        CBOpcode::Set0L       => &[&[inc::pc, bits::set::<0, { regs::L }>]],
        CBOpcode::Set0IndHL   => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::set::<0, { regs::ST }>, read::hl, mem::req_write], &[write::mem]],
        CBOpcode::Set0A       => &[&[inc::pc, bits::set::<0, { regs::A }>]],
        CBOpcode::Set1B       => &[&[inc::pc, bits::set::<1, { regs::B }>]],
        CBOpcode::Set1C       => &[&[inc::pc, bits::set::<1, { regs::C }>]],
        CBOpcode::Set1D       => &[&[inc::pc, bits::set::<1, { regs::D }>]],
        CBOpcode::Set1E       => &[&[inc::pc, bits::set::<1, { regs::E }>]],
        CBOpcode::Set1H       => &[&[inc::pc, bits::set::<1, { regs::H }>]],
        CBOpcode::Set1L       => &[&[inc::pc, bits::set::<1, { regs::L }>]],
        CBOpcode::Set1IndHL   => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::set::<1, { regs::ST }>, read::hl, mem::req_write], &[write::mem]],
        CBOpcode::Set1A       => &[&[inc::pc, bits::set::<1, { regs::A }>]],
        CBOpcode::Set2B       => &[&[inc::pc, bits::set::<2, { regs::B }>]],
        CBOpcode::Set2C       => &[&[inc::pc, bits::set::<2, { regs::C }>]],
        CBOpcode::Set2D       => &[&[inc::pc, bits::set::<2, { regs::D }>]],
        CBOpcode::Set2E       => &[&[inc::pc, bits::set::<2, { regs::E }>]],
        CBOpcode::Set2H       => &[&[inc::pc, bits::set::<2, { regs::H }>]],
        CBOpcode::Set2L       => &[&[inc::pc, bits::set::<2, { regs::L }>]],
        CBOpcode::Set2IndHL   => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::set::<2, { regs::ST }>, read::hl, mem::req_write], &[write::mem]],
        CBOpcode::Set2A       => &[&[inc::pc, bits::set::<2, { regs::A }>]],
        CBOpcode::Set3B       => &[&[inc::pc, bits::set::<3, { regs::B }>]],
        CBOpcode::Set3C       => &[&[inc::pc, bits::set::<3, { regs::C }>]],
        CBOpcode::Set3D       => &[&[inc::pc, bits::set::<3, { regs::D }>]],
        CBOpcode::Set3E       => &[&[inc::pc, bits::set::<3, { regs::E }>]],
        CBOpcode::Set3H       => &[&[inc::pc, bits::set::<3, { regs::H }>]],
        CBOpcode::Set3L       => &[&[inc::pc, bits::set::<3, { regs::L }>]],
        CBOpcode::Set3IndHL   => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::set::<3, { regs::ST }>, read::hl, mem::req_write], &[write::mem]],
        CBOpcode::Set3A       => &[&[inc::pc, bits::set::<3, { regs::A }>]],
        CBOpcode::Set4B       => &[&[inc::pc, bits::set::<4, { regs::B }>]],
        CBOpcode::Set4C       => &[&[inc::pc, bits::set::<4, { regs::C }>]],
        CBOpcode::Set4D       => &[&[inc::pc, bits::set::<4, { regs::D }>]],
        CBOpcode::Set4E       => &[&[inc::pc, bits::set::<4, { regs::E }>]],
        CBOpcode::Set4H       => &[&[inc::pc, bits::set::<4, { regs::H }>]],
        CBOpcode::Set4L       => &[&[inc::pc, bits::set::<4, { regs::L }>]],
        CBOpcode::Set4IndHL   => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::set::<4, { regs::ST }>, read::hl, mem::req_write], &[write::mem]],
        CBOpcode::Set4A       => &[&[inc::pc, bits::set::<4, { regs::A }>]],
        CBOpcode::Set5B       => &[&[inc::pc, bits::set::<5, { regs::B }>]],
        CBOpcode::Set5C       => &[&[inc::pc, bits::set::<5, { regs::C }>]],
        CBOpcode::Set5D       => &[&[inc::pc, bits::set::<5, { regs::D }>]],
        CBOpcode::Set5E       => &[&[inc::pc, bits::set::<5, { regs::E }>]],
        CBOpcode::Set5H       => &[&[inc::pc, bits::set::<5, { regs::H }>]],
        CBOpcode::Set5L       => &[&[inc::pc, bits::set::<5, { regs::L }>]],
        CBOpcode::Set5IndHL   => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::set::<5, { regs::ST }>, read::hl, mem::req_write], &[write::mem]],
        CBOpcode::Set5A       => &[&[inc::pc, bits::set::<5, { regs::A }>]],
        CBOpcode::Set6B       => &[&[inc::pc, bits::set::<6, { regs::B }>]],
        CBOpcode::Set6C       => &[&[inc::pc, bits::set::<6, { regs::C }>]],
        CBOpcode::Set6D       => &[&[inc::pc, bits::set::<6, { regs::D }>]],
        CBOpcode::Set6E       => &[&[inc::pc, bits::set::<6, { regs::E }>]],
        CBOpcode::Set6H       => &[&[inc::pc, bits::set::<6, { regs::H }>]],
        CBOpcode::Set6L       => &[&[inc::pc, bits::set::<6, { regs::L }>]],
        CBOpcode::Set6IndHL   => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::set::<6, { regs::ST }>, read::hl, mem::req_write], &[write::mem]],
        CBOpcode::Set6A       => &[&[inc::pc, bits::set::<6, { regs::A }>]],
        CBOpcode::Set7B       => &[&[inc::pc, bits::set::<7, { regs::B }>]],
        CBOpcode::Set7C       => &[&[inc::pc, bits::set::<7, { regs::C }>]],
        CBOpcode::Set7D       => &[&[inc::pc, bits::set::<7, { regs::D }>]],
        CBOpcode::Set7E       => &[&[inc::pc, bits::set::<7, { regs::E }>]],
        CBOpcode::Set7H       => &[&[inc::pc, bits::set::<7, { regs::H }>]],
        CBOpcode::Set7L       => &[&[inc::pc, bits::set::<7, { regs::L }>]],
        CBOpcode::Set7IndHL   => &[&[inc::pc, read::hl, mem::req_read], &[read::mem, bits::set::<7, { regs::ST }>, read::hl, mem::req_write], &[write::mem]],
        CBOpcode::Set7A       => &[&[inc::pc, bits::set::<7, { regs::A }>]]
    }
}
